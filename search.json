[{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Generating the Observation Period Table","text":"observation_period table central component OMOP CDM. observation_period table contains records define spans time two conditions expected hold: () Clinical Events happened Person recorded Event tables, (ii) absence records indicate Events occur span time. practice, summarise two conditions saying person observation. Accurately defining observation period essential many types studies. example: incidence prevalence studies, determines denominator population; survival analyses, individuals censored longer observation… definition observation period can therefore strongly influence study results [CITE]. primary care claims data, defining observation relatively straightforward, can based enrollment disenrollment dates. However, datasets include secondary tertiary care records, complex. cases, HERON-UK network recommends assigning single observation period per person, starting first record database (e.g., first hospital visit) ending earliest : (1) patient’s death date; (2) censoring age (commonly 120 years, may vary depending data source); (3) censoring date (typically data extraction date).1 vignette, illustrate several approaches defining observation period: First extraction: one observation period per person first record extraction date. First last: one observation period per person first record last record database. Inpatient: individuals observation ongoing visit. Collapse 180: individuals observation ongoing record, different records collapsed using window 180 days. Collapse+Persistence 180: individuals observation ongoing record, different records collapsed using window 180 days, persistence window 179 days added end observation period. Collapse+Persistence 365: individuals observation ongoing record, different records collapsed using window 365 days, persistence window 364 days added end observation period. Pediatric: one observation period per person first record extraction date 18th birthday individual. demonstrate definitions, use toy example containing 3 visit records (visit_occurrence) 5 drug records (drug_exposure). shown Figure @ref(fig:fig-toy), visits shown blue drug exposures green. Representation synthetic patient records. Now can built 7 definitions observation period seen Figure @ref(fig:fig-obs). inpatient definition restrictive one 3 observation periods created one per inpatient episode, hand ‘First extraction’ (1) ‘Collapse+Persistence 365’ (6) one generating longer period observed time. Note also individuals observation period censored extraction date latest. Different observation periods. next section see built observation periods synthetic database.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"build-observation_period-table-in-gibleed","dir":"Articles","previous_headings":"","what":"Build observation_period table in GiBleed","title":"Generating the Observation Period Table","text":"Now seen importance observation period definition see built synthetic dataset. purpose example use (GiBleed) dataset available using omock. dataset observation_period table already populated, create using 7 definitions seen section . Note cdm inserted duckdb connection simulate real case data database. observation_period table built using buildObservationPeriod() function parametrise different ways case. Later summarise using OmopSketch can compare different definitions end. definitions observation period use censorAge = 120 dateRange = .Date(c(\"1900-01-01\", \"2020-01-01\")). Note also death record database person automatically censored day. Unless otherwise specified adjusting recordsFrom argument, records contributing observation period searched following tables: drug_exposure visit_occurrence.","code":"library(omock) library(OmopConstructor) library(OmopSketch) library(dplyr, warn.conflicts = FALSE) library(ggplot2) library(visOmopResults)  cdm <- mockCdmFromDataset(datasetName = \"GiBleed\", source = \"duckdb\") #> ℹ Reading GiBleed tables. #> ℹ Adding drug_strength table. cdm #>  #> ── # OMOP CDM reference (duckdb) of GiBleed ──────────────────────────────────── #> • omop tables: care_site, cdm_source, concept, concept_ancestor, concept_class, #> concept_relationship, concept_synonym, condition_era, condition_occurrence, #> cost, death, device_exposure, domain, dose_era, drug_era, drug_exposure, #> drug_strength, fact_relationship, location, measurement, metadata, note, #> note_nlp, observation, observation_period, payer_plan_period, person, #> procedure_occurrence, provider, relationship, source_to_concept_map, specimen, #> visit_detail, visit_occurrence, vocabulary #> • cohort tables: - #> • achilles tables: - #> • other tables: -"},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"first-to-extraction","dir":"Articles","previous_headings":"Build observation_period table in GiBleed","what":"First to extraction","title":"Generating the Observation Period Table","text":"build observation period span first record data extraction need set collapseDays persistenceDays Inf want span observation period till extraction data.","code":"cdm <- buildObservationPeriod(   cdm = cdm,   collapseDays = Inf,   persistenceDays = Inf,   censorAge = 120,   dateRange = as.Date(c(\"1900-01-01\", \"2020-01-01\")) )  # summarise the generated observation_period using OmopSketch result1a <- summariseObservationPeriod(observationPeriod = cdm$observation_period,                                        byOrdinal = FALSE) result1b <- summariseInObservation(observationPeriod = cdm$observation_period,                                    interval = \"years\",                                    output = c(\"person-days\", \"age\")) #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:13:37.186721 #>  #> ✔ Summary finished, at 2025-10-07 14:13:37.274001 #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:13:39.031062 #>  #> ✔ Summary finished, at 2025-10-07 14:13:39.172051  # change cdm_name to identify the different results objects result1 <- bind(result1a, result1b) |>   mutate(cdm_name = \"First to extract\")"},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"first-to-last","dir":"Articles","previous_headings":"Build observation_period table in GiBleed","what":"First to last","title":"Generating the Observation Period Table","text":"built observation period span first record last record extraction need set collapseDays Inf persistenceDays 0 want add time last record. observation period definition can problematic observation periods change retrospectively data extraction toward end observation end sick population observation.","code":"cdm <- buildObservationPeriod(   cdm = cdm,   collapseDays = Inf,   persistenceDays = 0,   censorAge = 120,   dateRange = as.Date(c(\"1900-01-01\", \"2020-01-01\")) )  # summarise the generated observation_period using OmopSketch result2a <- summariseObservationPeriod(observationPeriod = cdm$observation_period,                                        byOrdinal = FALSE) result2b <- summariseInObservation(observationPeriod = cdm$observation_period,                                    interval = \"years\",                                    output = c(\"person-days\", \"age\")) #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:13:43.014273 #>  #> ✔ Summary finished, at 2025-10-07 14:13:43.107932 #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:13:44.753803 #>  #> ✔ Summary finished, at 2025-10-07 14:13:44.883786  # change cdm_name to identify the different results objects result2 <- bind(result2a, result2b) |>   mutate(cdm_name = \"First to last\")"},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"inpatient","dir":"Articles","previous_headings":"Build observation_period table in GiBleed","what":"Inpatient","title":"Generating the Observation Period Table","text":"built observation period inpatient episodes set collapseDays persistenceDays 0 want collapse add time records. also specify want use data visit_occurrence table, using recordsFrom argument (recordsFrom = visit_occurrence). result people multiple observation periods, period duration relatively short. good option use want calculate incidence prevalence, result unreliable denominator.","code":"cdm <- buildObservationPeriod(   cdm = cdm,   collapseDays = 0,   persistenceDays = 0,   censorAge = 120,   dateRange = as.Date(c(\"1900-01-01\", \"2020-01-01\")),   recordsFrom = \"visit_occurrence\" ) #> ℹ `persistenceDays` (0) can not be equal to `collapseDays` (0) as back to back #>   observation periods are not allowed, setting `collapseDays = 1`.  # summarise the generated observation_period using OmopSketch result3a <- summariseObservationPeriod(observationPeriod = cdm$observation_period,                                        byOrdinal = FALSE) result3b <- summariseInObservation(observationPeriod = cdm$observation_period,                                    interval = \"years\",                                    output = c(\"person-days\", \"age\")) #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:13:48.875105 #>  #> ✔ Summary finished, at 2025-10-07 14:13:48.956658 #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:13:50.282261 #>  #> ✔ Summary finished, at 2025-10-07 14:13:50.394297  # change cdm_name to identify the different results objects result3 <- bind(result3a, result3b) |>   mutate(cdm_name = \"Inpatient\")"},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"collapse-180","dir":"Articles","previous_headings":"Build observation_period table in GiBleed","what":"Collapse 180","title":"Generating the Observation Period Table","text":"collapse records separated 180 days use collapseDays argument (collapseDays = 180) set persistenceDays 0 add time records.","code":"cdm <- buildObservationPeriod(   cdm = cdm,   collapseDays = 180,   persistenceDays = 0,   censorAge = 120,   dateRange = as.Date(c(\"1900-01-01\", \"2020-01-01\")) )  # summarise the generated observation_period using OmopSketch result4a <- summariseObservationPeriod(observationPeriod = cdm$observation_period,                                        byOrdinal = FALSE) result4b <- summariseInObservation(observationPeriod = cdm$observation_period,                                    interval = \"years\",                                    output = c(\"person-days\", \"age\")) #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:13:54.744977 #>  #> ✔ Summary finished, at 2025-10-07 14:13:54.830476 #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:13:56.40212 #>  #> ✔ Summary finished, at 2025-10-07 14:13:56.514404  # change cdm_name to identify the different results objects result4 <- bind(result4a, result4b) |>   mutate(cdm_name = \"Collapse 180\")"},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"collapsepersistence-180","dir":"Articles","previous_headings":"Build observation_period table in GiBleed","what":"Collapse+Persistence 180","title":"Generating the Observation Period Table","text":"collapse records separated 180 days use collapseDays argument (collapseDays = 180), time set persistenceDays 179 want add 179 days record. Note persistenceDays collapseDays can back back observation periods allowed.","code":"cdm <- buildObservationPeriod(   cdm = cdm,   collapseDays = 180,   persistenceDays = 179,   censorAge = 120,   dateRange = as.Date(c(\"1900-01-01\", \"2020-01-01\")) )  # summarise the generated observation_period using OmopSketch result5a <- summariseObservationPeriod(observationPeriod = cdm$observation_period,                                        byOrdinal = FALSE) result5b <- summariseInObservation(observationPeriod = cdm$observation_period,                                    interval = \"years\",                                    output = c(\"person-days\", \"age\")) #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:14:00.920279 #>  #> ✔ Summary finished, at 2025-10-07 14:14:01.005507 #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:14:02.621408 #>  #> ✔ Summary finished, at 2025-10-07 14:14:02.741194  # change cdm_name to identify the different results objects result5 <- bind(result5a, result5b) |>   mutate(cdm_name = \"Collapse+Persistence 180\")"},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"collapsepersistence-365","dir":"Articles","previous_headings":"Build observation_period table in GiBleed","what":"Collapse+Persistence 365","title":"Generating the Observation Period Table","text":"case set arguments 365 364 analogously previous definition.","code":"cdm <- buildObservationPeriod(   cdm = cdm,   collapseDays = 365,   persistenceDays = 364,   censorAge = 120,   dateRange = as.Date(c(\"1900-01-01\", \"2020-01-01\")) )  # summarise the generated observation_period using OmopSketch result6a <- summariseObservationPeriod(observationPeriod = cdm$observation_period,                                        byOrdinal = FALSE) result6b <- summariseInObservation(observationPeriod = cdm$observation_period,                                    interval = \"years\",                                    output = c(\"person-days\", \"age\")) #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:14:07.213416 #>  #> ✔ Summary finished, at 2025-10-07 14:14:07.297559 #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:14:08.818659 #>  #> ✔ Summary finished, at 2025-10-07 14:14:08.934879  # change cdm_name to identify the different results objects result6 <- bind(result6a, result6b) |>   mutate(cdm_name = \"Collapse+Persistence 365\")"},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"pediatric","dir":"Articles","previous_headings":"Build observation_period table in GiBleed","what":"Pediatric","title":"Generating the Observation Period Table","text":"case use definition used (First extraction) set censorAge argument 18 want simulate database pediatric data loose followup patient turns 18 moved specialised cares.","code":"cdm <- buildObservationPeriod(   cdm = cdm,   collapseDays = Inf,   persistenceDays = Inf,   censorAge = 18,   dateRange = as.Date(c(\"1900-01-01\", \"2020-01-01\")) )  # summarise the generated observation_period using OmopSketch result7a <- summariseObservationPeriod(observationPeriod = cdm$observation_period,                                        byOrdinal = FALSE) result7b <- summariseInObservation(observationPeriod = cdm$observation_period,                                    interval = \"years\",                                    output = c(\"person-days\", \"age\")) #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:14:12.437712 #>  #> ✔ Summary finished, at 2025-10-07 14:14:12.514194 #> ℹ The following estimates will be computed: #> • age: median #> → Start summary of data, at 2025-10-07 14:14:13.897656 #>  #> ✔ Summary finished, at 2025-10-07 14:14:14.001642  # change cdm_name to identify the different results objects result7 <- bind(result7a, result7b) |>   mutate(cdm_name = \"Pediatric\")"},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"comparison-of-the-different-definitions","dir":"Articles","previous_headings":"","what":"Comparison of the different definitions","title":"Generating the Observation Period Table","text":"can easily merge different results single result object using bind() function. compare overall statistics observation period: can see definitions (1), (2) (7) lead one observation period per person definition. Collapse 180 (4) Collapse+Persistence180 (5) lead number observation periods different durations. can take better look statistics looking plots:  expected example can see using window 180 creates observation periods using 365 collapse window, expected, bigger window less observation periods . Now taking look length observation periods, make plot clear renomalise maximum 1 can see different densities side side:  can see Collapse, persistent Inpatient approaches generate short observation periods, pediatric approach individuals censored 18th birth day GiBleed many individuals contributing since birth date peak ~6574 days. ‘First extract’ ‘First last’ show similar time distributions higher times ‘First extract’ approach. Now can compare amount person-days observation one observation period definitions, note denominator incidence prevalence study.  plot trends worth remarking: larger gap increases observation time (green vs yellow) Adding persistence window increases quite bit observable time (red vs green) Using first last approach lead less individuals observation towards end observation window. Finally, show depth findings can see evolution median age individuals observation:  case see pediatric population always lower median age individuals censored turn 18. Due GiBleed nature see trends see real world data like older population observation lower collapse window , sicker older population inpatient definition, sicker population closer get extraction date ‘First last’ definition. TODO: Add citation observation period methods paper ready. TODO: Invite collaborators submit results shiny comparison impact decision different datasets.","code":"result <- bind(result1, result2, result3, result4, result5, result6, result7) tableObservationPeriod(result) plotObservationPeriod(result = result,                        variableName = \"Records per person\",                       plotType = \"densityplot\",                        colour = \"cdm_name\") +   ggplot2::coord_cartesian(xlim = c(NA, 40)) result |>   filterSettings(result_type == \"summarise_observation_period\") |>   filter(     variable_name == \"Duration in days\",     estimate_name %in% c(\"density_x\", \"density_y\")   ) |>   tidy() |>   mutate(cdm_name = factor(cdm_name, levels = unique(cdm_name))) |>   group_by(cdm_name) |>   mutate(density_y = density_y / max(density_y)) |>   ungroup() |>   scatterPlot(     x = \"density_x\",     y = \"density_y\",     line = TRUE,     point = FALSE,     ribbon = FALSE,     colour = \"cdm_name\"   ) result |>   filter(variable_name == 'Number person-days') |>   plotInObservation(colour = \"cdm_name\") #> `result_id` is not present in result. #> `result_id` is not present in result. result |>   filter(variable_name == 'Median age in observation') |>   plotInObservation(colour = \"cdm_name\") #> `result_id` is not present in result. #> `result_id` is not present in result."},{"path":"https://OHDSI.github.io/OmopConstructor/articles/buildObservationPeriod.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final remarks","title":"Generating the Observation Period Table","text":"seen, observation period table key significant impact many studies. Therefore, defining observation period must done carefully, full awareness limitations associated approach. appropriate observation period often varies study study. OmopConstructor becomes especially valuable, allows users define custom observation periods study--study basis. Note: database back-end cdms note observation_period table generated writeSchema. want use generate observation_period cdmSchema need use writeSchema = cdmSchema writing permissions cdmSchema.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martí Català. Author, maintainer. Elin Rowlands. Contributor. Cecilia Campanile. Contributor.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Català M (2025). OmopConstructor: Build Tables OMOP Common Data Model. R package version 0.1.0, https://ohdsi.github.io/OmopConstructor/.","code":"@Manual{,   title = {OmopConstructor: Build Tables in the OMOP Common Data Model},   author = {Martí Català},   year = {2025},   note = {R package version 0.1.0},   url = {https://ohdsi.github.io/OmopConstructor/}, }"},{"path":"https://OHDSI.github.io/OmopConstructor/index.html","id":"omopconstructor","dir":"","previous_headings":"","what":"Build Tables in the OMOP Common Data Model","title":"Build Tables in the OMOP Common Data Model","text":"OmopConstructor package contains functionality construct standardised tables health care data formatted according Observational Medical Outcomes Partnership Common Data Model (OMOP CDM). package includes tools build key tables observation period drug era, among others.","code":""},{"path":[]},{"path":"https://OHDSI.github.io/OmopConstructor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Build Tables in the OMOP Common Data Model","text":"can install OmopConstructor cran using: , can install development version OmopConstructor GitHub :","code":"install.packages(\"OmopConstructor\") # install.packages(\"pak\") pak::pkg_install(\"ohdsi/OmopConstructor\")"},{"path":"https://OHDSI.github.io/OmopConstructor/index.html","id":"main-functionality","dir":"","previous_headings":"","what":"Main functionality","title":"Build Tables in the OMOP Common Data Model","text":"Currently OmopConstructor main functionalities : buildObservationPeriod() generate observation periods based data already cdm object.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/index.html","id":"building-observation-periods","dir":"","previous_headings":"Main functionality","what":"Building observation periods","title":"Build Tables in the OMOP Common Data Model","text":"can generate observation period table directly data contained cdm object, particularly useful creating custom observation periods study--study basis. example, observation period defined one record per person, starting first available observation data ending earliest following: (1) recorded death, (2) reaching 120 years age, (3) extraction date (, set 01-01-2010). can use OmopSketch visualise characteristics new observation period table built:","code":"library(omock) library(OmopConstructor)  cdm <- mockCdmFromDataset(datasetName = \"GiBleed\", source = \"duckdb\") #> ℹ Reading GiBleed tables. #> ℹ Adding drug_strength table. #> ℹ Creating local <cdm_reference> object. #> ℹ Inserting <cdm_reference> into duckdb.  cdm <- buildObservationPeriod(cdm = cdm,                               collapseDays = Inf,                               persistenceDays = Inf,                                dateRange = as.Date(c(\"1900-01-01\", \"2010-01-01\")),                                censorAge = 120) cdm #>  #> ── # OMOP CDM reference (duckdb) of GiBleed ──────────────────────────────────── #> • omop tables: care_site, cdm_source, concept, concept_ancestor, concept_class, #> concept_relationship, concept_synonym, condition_era, condition_occurrence, #> cost, death, device_exposure, domain, dose_era, drug_era, drug_exposure, #> drug_strength, fact_relationship, location, measurement, metadata, note, #> note_nlp, observation, observation_period, payer_plan_period, person, #> procedure_occurrence, provider, relationship, source_to_concept_map, specimen, #> visit_detail, visit_occurrence, vocabulary #> • cohort tables: - #> • achilles tables: - #> • other tables: - library(OmopSketch)  result <- summariseObservationPeriod(observationPeriod = cdm$observation_period)  tableObservationPeriod(result = result, type = \"flextable\")"},{"path":"https://OHDSI.github.io/OmopConstructor/index.html","id":"running","dir":"","previous_headings":"","what":"Running","title":"Build Tables in the OMOP Common Data Model","text":"Configure .env configuration file using example.env example settings file. Supply JDBC driver place drivers directory. successful execution observation_period truncated recalculated.","code":"docker build . -t omop-constructor  docker run --rm --env-file=\".env\" --network=\"host\" omop-constructor"},{"path":"https://OHDSI.github.io/OmopConstructor/reference/OmopConstructor-package.html","id":null,"dir":"Reference","previous_headings":"","what":"OmopConstructor: Build Tables in the OMOP Common Data Model — OmopConstructor-package","title":"OmopConstructor: Build Tables in the OMOP Common Data Model — OmopConstructor-package","text":"Provides functionality construct standardised tables health care data formatted according Observational Medical Outcomes Partnership (OMOP) Common Data Model. package includes tools build key tables observation period drug era, among others.","code":""},{"path":[]},{"path":"https://OHDSI.github.io/OmopConstructor/reference/OmopConstructor-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"OmopConstructor: Build Tables in the OMOP Common Data Model — OmopConstructor-package","text":"Maintainer: Martí Català marti.catalasabate@ndorms.ox.ac.uk (ORCID) contributors: Elin Rowlands elin.rowlands@ndorms.ox.ac.uk (ORCID) [contributor] Cecilia Campanile cecilia.campanile@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/reference/buildObservationPeriod.html","id":null,"dir":"Reference","previous_headings":"","what":"Build observation_period table from data recorded in the cdm_reference — buildObservationPeriod","title":"Build observation_period table from data recorded in the cdm_reference — buildObservationPeriod","text":"Build observation_period table data recorded cdm_reference","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/reference/buildObservationPeriod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build observation_period table from data recorded in the cdm_reference — buildObservationPeriod","text":"","code":"buildObservationPeriod(   cdm,   collapseDays = Inf,   persistenceDays = Inf,   dateRange = as.Date(c(\"1900-01-01\", NA)),   censorAge = 120L,   recordsFrom = c(\"drug_exposure\", \"visit_occurrence\"),   periodTypeConceptId = 32817L )"},{"path":"https://OHDSI.github.io/OmopConstructor/reference/buildObservationPeriod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build observation_period table from data recorded in the cdm_reference — buildObservationPeriod","text":"cdm cdm_reference object. collapseDays Distance records collapsed. persistenceDays Number days added end observation period persistence window. dateRange Range dates considered. default '1900-01-01' used start date, whereas censor date first available source_release_date, cdm_release_date, Sys.Date() used. censorAge Age censor individuals reach certain age. last day observation individual day prior birthday. recordsFrom Tables retrieve observation records . periodTypeConceptId Choose observation_period_type_concept_id best represents period determined. Accepted Concepts.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/reference/buildObservationPeriod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build observation_period table from data recorded in the cdm_reference — buildObservationPeriod","text":"cdm_reference object new observation_period.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/reference/collapseRecords.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse records of a cdm_table into episodes. — collapseRecords","title":"Collapse records of a cdm_table into episodes. — collapseRecords","text":"Collapse records cdm_table episodes.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/reference/collapseRecords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse records of a cdm_table into episodes. — collapseRecords","text":"","code":"collapseRecords(x, startDate, endDate, by, gap = 0L, name = NULL)"},{"path":"https://OHDSI.github.io/OmopConstructor/reference/collapseRecords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse records of a cdm_table into episodes. — collapseRecords","text":"x cdm_table object. startDate Column x points start date record. endDate Column x point end date record. Columns x aggregate records. gap Integer; distance allowed two consecutive records collapsed. name Name new cdm_table created.","code":""},{"path":"https://OHDSI.github.io/OmopConstructor/reference/collapseRecords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse records of a cdm_table into episodes. — collapseRecords","text":"x cdm_table records collapsed.","code":""}]
